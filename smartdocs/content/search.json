{
  "components": [
    {
      "displayName": "App",
      "filePath": "src\\App.tsx",
      "description": "Main application component with routing and global context\n\nThis is the root component that sets up routing, provides global state management,\nand renders the main application layout with navigation and page content.",
      "type": "component",
      "props": [],
      "jsdoc": {
        "description": "Main application component with routing and global context\n\nThis is the root component that sets up routing, provides global state management,\nand renders the main application layout with navigation and page content."
      },
      "examples": [],
      "realUsageExamples": [
        "<App />"
      ]
    },
    {
      "displayName": "TestPage",
      "filePath": "src\\Test.tsx",
      "description": "About Page Component\n\nDisplays information about the SmartDocs Demo application,\ntechnology stack, features, and team information.",
      "type": "component",
      "props": [],
      "jsdoc": {
        "description": "About Page Component\n\nDisplays information about the SmartDocs Demo application,\ntechnology stack, features, and team information."
      },
      "examples": [],
      "realUsageExamples": [
        "<TestPage />"
      ]
    },
    {
      "displayName": "DynamicPages",
      "filePath": "src\\assets\\DynamicPages.tsx",
      "description": "Dynamic Page Component\n\nA dynamic page that displays content based on the ID parameter in the URL.\nDemonstrates React Router's dynamic routing capabilities.",
      "type": "page",
      "props": [],
      "jsdoc": {
        "description": "Dynamic Page Component\n\nA dynamic page that displays content based on the ID parameter in the URL.\nDemonstrates React Router's dynamic routing capabilities."
      },
      "examples": [],
      "realUsageExamples": []
    },
    {
      "displayName": "AppProvider",
      "filePath": "src\\context\\AppContext.tsx",
      "description": "App Context Provider\n\nProvides global state management for the entire application using React Context and useReducer.\nManages theme, user authentication, notifications, and loading states.",
      "type": "component",
      "props": [],
      "jsdoc": {
        "description": "App Context Provider\n\nProvides global state management for the entire application using React Context and useReducer.\nManages theme, user authentication, notifications, and loading states."
      },
      "examples": [],
      "realUsageExamples": [
        "<AppProvider>\n<Router>\n<div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-300\">\n<Navigation />\n<Notifications />\n<main>\n<Routes>\n<Route path=\"/\" element={<HomePage />} />\n<Route path=\"/about\" element={<AboutPage />} />\n<Route path=\"/contact\" element={<ContactPage />} />\n<Route path=\"/examples\" element={<ExamplePage />} />\n{/* Dynamic routes with ID parameters */}\n<Route path=\"/pages/:id\" element={<DynamicPage />} />\n<Route path=\"/articles/:id\" element={<DynamicPagess />} />\n<Route path=\"/products/:id\" element={<DynamicPages />} />\n<Route path=\"/test\" element={<TestPage />} />\n{/* Catch-all route for 404 */}\n<Route path=\"*\" element={<NotFoundPage />} />\n</Routes>\n</main>\n</div>\n</Router>\n</AppProvider>"
      ]
    },
    {
      "displayName": "useAppContext",
      "filePath": "src\\context\\AppContext.tsx",
      "description": "Custom hook to use the App Context",
      "type": "hook",
      "props": [],
      "jsdoc": {
        "description": "Custom hook to use the App Context"
      },
      "examples": [],
      "realUsageExamples": [
        "const { state, addNotification } = useAppContext()",
        "const { state, toggleTheme, logout, addNotification } = useAppContext()",
        "const { state, removeNotification } = useAppContext()"
      ],
      "hookSignature": "",
      "parameters": [],
      "returnType": {
        "type": "AppContextType"
      },
      "hookUsages": [
        {
          "file": "src\\Test.tsx",
          "line": 14,
          "code": "const { state, addNotification } = useAppContext()",
          "context": "TestPage",
          "destructuring": [
            "state",
            "addNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\assets\\DynamicPages.tsx",
          "line": 17,
          "code": "const { state, addNotification } = useAppContext()",
          "context": "navigate",
          "destructuring": [
            "state",
            "addNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\component\\DynamicPagess.tsx",
          "line": 17,
          "code": "const { state, addNotification } = useAppContext()",
          "context": "navigate",
          "destructuring": [
            "state",
            "addNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\component\\Navigation.tsx",
          "line": 14,
          "code": "const { state, toggleTheme, logout, addNotification } = useAppContext()",
          "context": "Navigation",
          "destructuring": [
            "state",
            "toggleTheme",
            "logout",
            "addNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\component\\Notifications.tsx",
          "line": 11,
          "code": "const { state, removeNotification } = useAppContext()",
          "context": "Notifications",
          "destructuring": [
            "state",
            "removeNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\pages\\AboutPage.tsx",
          "line": 14,
          "code": "const { state, addNotification } = useAppContext()",
          "context": "AboutPage",
          "destructuring": [
            "state",
            "addNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\pages\\ContactPage.tsx",
          "line": 16,
          "code": "const { state, addNotification } = useAppContext()",
          "context": "ContactPage",
          "destructuring": [
            "state",
            "addNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\pages\\DynamicPage.tsx",
          "line": 17,
          "code": "const { state, addNotification } = useAppContext()",
          "context": "navigate",
          "destructuring": [
            "state",
            "addNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\pages\\ExamplePage.tsx",
          "line": 19,
          "code": "const { state, addNotification } = useAppContext()",
          "context": "ExamplePage",
          "destructuring": [
            "state",
            "addNotification"
          ],
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\pages\\HomePage.tsx",
          "line": 15,
          "code": "const { state, toggleTheme, addNotification, setUser } = useAppContext()",
          "context": "HomePage",
          "destructuring": [
            "state",
            "toggleTheme",
            "addNotification",
            "setUser"
          ],
          "parameters": [],
          "defaults": {}
        }
      ],
      "isBuiltInHook": false,
      "hookCategory": "custom"
    },
    {
      "displayName": "Badge",
      "filePath": "src\\component\\Badge.tsx",
      "description": "Badge Component\n\nA versatile badge component for displaying labels, status indicators, and tags.\nSupports multiple variants and sizes with customizable styling.",
      "type": "component",
      "props": [
        {
          "name": "variant",
          "type": "enum",
          "required": false,
          "defaultValue": "primary",
          "description": ""
        },
        {
          "name": "size",
          "type": "enum",
          "required": false,
          "defaultValue": "medium",
          "description": ""
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "defaultValue": "{\"value\":\"\"}",
          "description": ""
        }
      ],
      "jsdoc": {
        "description": "Badge Component\n\nA versatile badge component for displaying labels, status indicators, and tags.\nSupports multiple variants and sizes with customizable styling."
      },
      "examples": [],
      "realUsageExamples": [
        "<Badge variant=\"primary\" size=\"small\">\n{tech.category}\n</Badge>",
        "<Badge key={skillIndex} variant=\"secondary\" size=\"small\" className=\"mr-2\">\n{skill}\n</Badge>",
        "<Badge variant=\"primary\" size=\"large\">ID: {id}</Badge>"
      ]
    },
    {
      "displayName": "Button",
      "filePath": "src\\component\\Button.tsx",
      "description": "Button component for user interactions",
      "type": "component",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "The content to display inside the button"
        },
        {
          "name": "variant",
          "type": "enum",
          "required": false,
          "defaultValue": "primary",
          "description": "The visual style variant of the button"
        },
        {
          "name": "size",
          "type": "enum",
          "required": false,
          "defaultValue": "medium",
          "description": "The size of the button"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "Whether the button is disabled"
        },
        {
          "name": "onClick",
          "type": "() => void",
          "required": false,
          "description": "Click handler function"
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "defaultValue": "{\"value\":\"\"}",
          "description": "Additional CSS class names"
        }
      ],
      "jsdoc": {
        "description": "Button component for user interactions"
      },
      "examples": [],
      "realUsageExamples": [
        "<Button\nvariant=\"secondary\"\nsize=\"small\"\nclassName=\"w-full\"\nonClick={() => handleLearnMore(tech.name)}\n>\nLearn More\n</Button>",
        "<Button\nvariant=\"primary\"\nsize=\"small\"\nonClick={() => handleLearnMore(feature.title)}\n>\nExplore\n</Button>",
        "<Button\nvariant=\"success\"\nonClick={() => window.location.href = '/'}\n>\nBack to Home\n</Button>"
      ]
    },
    {
      "displayName": "ButtonComponent",
      "filePath": "src\\component\\ButtonComponent.tsx",
      "description": "Advanced button component with state management for user interactions",
      "type": "component",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "The content to display inside the button"
        },
        {
          "name": "variant",
          "type": "enum",
          "required": false,
          "defaultValue": "primary",
          "description": "The visual style variant of the button"
        },
        {
          "name": "size",
          "type": "enum",
          "required": false,
          "defaultValue": "medium",
          "description": "The size of the button"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "Whether the button is disabled"
        },
        {
          "name": "onClick",
          "type": "() => void",
          "required": false,
          "description": "Click handler function"
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "defaultValue": "{\"value\":\"\"}",
          "description": "Additional CSS class names"
        }
      ],
      "jsdoc": {
        "description": "Advanced button component with state management for user interactions"
      },
      "examples": [],
      "realUsageExamples": [
        "<ButtonComponent variant=\"primary\" size=\"small\" className=\"w-full\">\nView Profile\n</ButtonComponent>",
        "<ButtonComponent\nvariant=\"primary\"\nonClick={() => window.location.href = '/contact'}\n>\nContact Us\n</ButtonComponent>",
        "<ButtonComponent\nvariant=\"secondary\"\nonClick={() => addNotification({ message: 'GitHub repository opening...', type: 'info' })}\n>\nView on GitHub\n</ButtonComponent>"
      ]
    },
    {
      "displayName": "CardWidget",
      "filePath": "src\\component\\CardWidget.tsx",
      "description": "A versatile card widget component for organizing content",
      "type": "component",
      "props": [
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "The main content of the card"
        },
        {
          "name": "title",
          "type": "string",
          "required": false,
          "description": "Optional title displayed in the card header"
        },
        {
          "name": "subtitle",
          "type": "string",
          "required": false,
          "description": "Optional subtitle displayed below the title"
        },
        {
          "name": "footer",
          "type": "ReactNode",
          "required": false,
          "description": "Optional footer content (buttons, links, etc.)"
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "defaultValue": "{\"value\":\"\"}",
          "description": "Additional CSS classes"
        },
        {
          "name": "elevation",
          "type": "enum",
          "required": false,
          "defaultValue": "md",
          "description": "Card elevation/shadow level"
        },
        {
          "name": "hoverable",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "Whether the card should be hoverable with animation"
        }
      ],
      "jsdoc": {
        "description": "A versatile card widget component for organizing content"
      },
      "examples": [],
      "realUsageExamples": [
        "<CardWidget\ntitle=\"Our Mission\"\nsubtitle=\"Building better developer experiences\"\nelevation=\"lg\"\nclassName=\"mb-12 text-center\"\n>\n<div className=\"space-y-4\">\n<p className=\"text-lg text-gray-700 dark:text-gray-300\">\nSmartDocs Demo showcases how modern React applications can be built with\nclean architecture, comprehensive TypeScript typing, and automatic documentation generation.\n</p>\n<p className=\"text-gray-600 dark:text-gray-400\">\nOur goal is to provide developers with a reference implementation that follows\nbest practices for component design, state management, and code organization.\n</p>\n</div>\n</CardWidget>",
        "<CardWidget\nkey={index}\ntitle={tech.name}\nsubtitle={`Version ${tech.version}`}\nelevation=\"md\"\nhoverable\n>\n<div className=\"space-y-3\">\n<Badge variant=\"primary\" size=\"small\">\n{tech.category}\n</Badge>\n<Button\nvariant=\"secondary\"\nsize=\"small\"\nclassName=\"w-full\"\nonClick={() => handleLearnMore(tech.name)}\n>\nLearn More\n</Button>\n</div>\n</CardWidget>",
        "<CardWidget\nkey={index}\ntitle={feature.title}\nsubtitle={feature.description}\nelevation=\"md\"\nhoverable\n>\n<div className=\"flex items-center space-x-4\">\n<div className=\"text-4xl\">{feature.icon}</div>\n<Button\nvariant=\"primary\"\nsize=\"small\"\nonClick={() => handleLearnMore(feature.title)}\n>\nExplore\n</Button>\n</div>\n</CardWidget>"
      ]
    },
    {
      "displayName": "DialogModal",
      "filePath": "src\\component\\DialogModal.tsx",
      "description": "Dialog modal component for displaying overlay content",
      "type": "component",
      "props": [
        {
          "name": "isOpen",
          "type": "boolean",
          "required": true,
          "description": "Whether the modal is currently visible"
        },
        {
          "name": "onClose",
          "type": "() => void",
          "required": true,
          "description": "Function called when the modal should be closed"
        },
        {
          "name": "title",
          "type": "string",
          "required": false,
          "description": "Optional title for the modal header"
        },
        {
          "name": "children",
          "type": "ReactNode",
          "required": true,
          "description": "The content to display in the modal body"
        },
        {
          "name": "maxWidth",
          "type": "enum",
          "required": false,
          "defaultValue": "md",
          "description": "Maximum width of the modal"
        },
        {
          "name": "closeOnBackdropClick",
          "type": "boolean",
          "required": false,
          "defaultValue": "true",
          "description": "Whether clicking the backdrop should close the modal"
        }
      ],
      "jsdoc": {
        "description": "Dialog modal component for displaying overlay content"
      },
      "examples": [],
      "realUsageExamples": [
        "<DialogModal\nisOpen={showModal}\nonClose={() => setShowModal(false)}\ntitle=\"Demo Modal\"\nmaxWidth=\"md\"\n>\n<div className=\"space-y-4\">\n<p>This is a dialog modal component that was opened by clicking the button.</p>\n<p>It demonstrates:</p>\n<ul className=\"list-disc list-inside space-y-1 text-sm\">\n<li>Backdrop click to close</li>\n<li>Custom title and content</li>\n<li>Responsive sizing</li>\n<li>Proper accessibility</li>\n<li>Integration with global context</li>\n</ul>\n<div className=\"flex justify-end space-x-2\">\n<ButtonComponent\nvariant=\"secondary\"\nonClick={() => {\nsetShowModal(false)\naddNotification({ message: 'Modal closed', type: 'info' })\n}}\n>\nCancel\n</ButtonComponent>\n<ButtonComponent\nvariant=\"primary\"\nonClick={() => {\nsetShowModal(false)\naddNotification({ message: 'Modal confirmed!', type: 'success' })\n}}\n>\nOK\n</ButtonComponent>\n</div>\n</div>\n</DialogModal>",
        "<DialogModal\nisOpen={showWelcomeModal}\nonClose={() => setShowWelcomeModal(false)}\ntitle=\"Welcome to SmartDocs Demo!\"\nmaxWidth=\"md\"\n>\n<div className=\"space-y-4\">\n<p>Thank you for exploring our demo application!</p>\n<p>This app demonstrates:</p>\n<ul className=\"list-disc list-inside space-y-1 text-sm\">\n<li>React Router for navigation</li>\n<li>Context API for global state</li>\n<li>TypeScript integration</li>\n<li>Component composition</li>\n<li>Responsive design with Tailwind CSS</li>\n</ul>\n<div className=\"flex justify-end space-x-2\">\n<ButtonComponent variant=\"primary\" onClick={() => setShowWelcomeModal(false)}>\nGot it!\n</ButtonComponent>\n</div>\n</div>\n</DialogModal>"
      ]
    },
    {
      "displayName": "DynamicPagess",
      "filePath": "src\\component\\DynamicPagess.tsx",
      "description": "Dynamic Page Component\n\nA dynamic page that displays content based on the ID parameter in the URL.\nDemonstrates React Router's dynamic routing capabilities.",
      "type": "page",
      "props": [],
      "jsdoc": {
        "description": "Dynamic Page Component\n\nA dynamic page that displays content based on the ID parameter in the URL.\nDemonstrates React Router's dynamic routing capabilities."
      },
      "examples": [],
      "realUsageExamples": []
    },
    {
      "displayName": "InputField",
      "filePath": "src\\component\\InputField.tsx",
      "description": "Enhanced input field component with validation",
      "type": "component",
      "props": [
        {
          "name": "label",
          "type": "string",
          "required": false,
          "description": "The input label"
        },
        {
          "name": "type",
          "type": "enum",
          "required": false,
          "defaultValue": "text",
          "description": "The input type"
        },
        {
          "name": "placeholder",
          "type": "string",
          "required": false,
          "description": "Placeholder text"
        },
        {
          "name": "value",
          "type": "string",
          "required": true,
          "description": "Current input value"
        },
        {
          "name": "onChange",
          "type": "(value: string) => void",
          "required": true,
          "description": "Change handler"
        },
        {
          "name": "required",
          "type": "boolean",
          "required": false,
          "defaultValue": "false",
          "description": "Whether the input is required"
        },
        {
          "name": "className",
          "type": "string",
          "required": false,
          "defaultValue": "{\"value\":\"\"}",
          "description": "Additional CSS classes"
        }
      ],
      "jsdoc": {
        "description": "Enhanced input field component with validation"
      },
      "examples": [],
      "realUsageExamples": [
        "<InputField\nlabel=\"Full Name\"\nvalue={formData.name}\nonChange={(value) => handleInputChange('name', value)}\nrequired\nplaceholder=\"John Doe\"\n/>",
        "<InputField\nlabel=\"Email Address\"\ntype=\"email\"\nvalue={formData.email}\nonChange={(value) => handleInputChange('email', value)}\nrequired\nplaceholder=\"john@example.com\"\n/>",
        "<InputField\nlabel=\"Company\"\nvalue={formData.company}\nonChange={(value) => handleInputChange('company', value)}\nplaceholder=\"Acme Corp (optional)\"\n/>"
      ]
    },
    {
      "displayName": "Navigation",
      "filePath": "src\\component\\Navigation.tsx",
      "description": "Navigation Header Component\n\nA responsive navigation header with routing links, theme toggle,\nuser authentication state, and notification indicators.",
      "type": "component",
      "props": [],
      "jsdoc": {
        "description": "Navigation Header Component\n\nA responsive navigation header with routing links, theme toggle,\nuser authentication state, and notification indicators."
      },
      "examples": [],
      "realUsageExamples": [
        "<Navigation />"
      ]
    },
    {
      "displayName": "Notifications",
      "filePath": "src\\component\\Notifications.tsx",
      "description": "Notifications Component\n\nDisplays toast notifications from the global app context.\nNotifications auto-dismiss after a timeout and can be manually closed.",
      "type": "page",
      "props": [],
      "jsdoc": {
        "description": "Notifications Component\n\nDisplays toast notifications from the global app context.\nNotifications auto-dismiss after a timeout and can be manually closed."
      },
      "examples": [],
      "realUsageExamples": []
    },
    {
      "displayName": "AboutPage",
      "filePath": "src\\pages\\AboutPage.tsx",
      "description": "About Page Component\n\nDisplays information about the SmartDocs Demo application,\ntechnology stack, features, and team information.",
      "type": "page",
      "props": [],
      "jsdoc": {
        "description": "About Page Component\n\nDisplays information about the SmartDocs Demo application,\ntechnology stack, features, and team information."
      },
      "examples": [],
      "realUsageExamples": []
    },
    {
      "displayName": "ContactPage",
      "filePath": "src\\pages\\ContactPage.tsx",
      "description": "Contact Page Component\n\nA contact form page demonstrating form validation, input handling,\nand integration with the global context for notifications and theme.",
      "type": "page",
      "props": [],
      "jsdoc": {
        "description": "Contact Page Component\n\nA contact form page demonstrating form validation, input handling,\nand integration with the global context for notifications and theme."
      },
      "examples": [],
      "realUsageExamples": []
    },
    {
      "displayName": "DynamicPage",
      "filePath": "src\\pages\\DynamicPage.tsx",
      "description": "Dynamic Page Component\n\nA dynamic page that displays content based on the ID parameter in the URL.\nDemonstrates React Router's dynamic routing capabilities.",
      "type": "page",
      "props": [],
      "jsdoc": {
        "description": "Dynamic Page Component\n\nA dynamic page that displays content based on the ID parameter in the URL.\nDemonstrates React Router's dynamic routing capabilities."
      },
      "examples": [],
      "realUsageExamples": []
    },
    {
      "displayName": "ExamplePage",
      "filePath": "src\\pages\\ExamplePage.tsx",
      "description": "Example Page Component\n\nThis page contains the original demo content showcasing various UI components,\nhooks functionality, and form validation examples.",
      "type": "page",
      "props": [],
      "jsdoc": {
        "description": "Example Page Component\n\nThis page contains the original demo content showcasing various UI components,\nhooks functionality, and form validation examples."
      },
      "examples": [],
      "realUsageExamples": []
    },
    {
      "displayName": "HomePage",
      "filePath": "src\\pages\\HomePage.tsx",
      "description": "Home Page Component\n\nThe main landing page of the application showcasing various components\nand demonstrating the use of global context for theme and state management.",
      "type": "page",
      "props": [],
      "jsdoc": {
        "description": "Home Page Component\n\nThe main landing page of the application showcasing various components\nand demonstrating the use of global context for theme and state management."
      },
      "examples": [],
      "realUsageExamples": []
    },
    {
      "displayName": "useApiCall",
      "filePath": "src\\services\\useApiCall.ts",
      "description": "Custom hook for making API calls with loading and error states",
      "type": "hook",
      "props": [],
      "jsdoc": {
        "description": "Custom hook for making API calls with loading and error states"
      },
      "examples": [],
      "realUsageExamples": [
        "const { data: buttonData } = useApiCall('/api/button-config');",
        "const { data: userData, loading, error } = useApiCall('/api/user-profile')"
      ],
      "hookSignature": "",
      "parameters": [
        {
          "name": "url",
          "type": "string",
          "required": true
        },
        {
          "name": "options",
          "type": "RequestInit",
          "required": false
        }
      ],
      "returnType": {
        "type": "unknown"
      },
      "hookUsages": [
        {
          "file": "src\\component\\ButtonComponent.tsx",
          "line": 41,
          "code": "const { data: buttonData } = useApiCall('/api/button-config');",
          "context": "ButtonComponent",
          "destructuring": [
            "data"
          ],
          "parameters": [
            "{StringLiteral}"
          ],
          "defaults": {
            "initialState": "{StringLiteral}"
          }
        },
        {
          "file": "src\\pages\\ExamplePage.tsx",
          "line": 26,
          "code": "const { data: userData, loading, error } = useApiCall('/api/user-profile')",
          "context": "ExamplePage",
          "destructuring": [
            "data",
            "loading",
            "error"
          ],
          "parameters": [
            "{StringLiteral}"
          ],
          "defaults": {
            "initialState": "{StringLiteral}"
          }
        }
      ],
      "isBuiltInHook": false,
      "hookCategory": "custom"
    },
    {
      "displayName": "useAppStorage",
      "filePath": "src\\utils\\useAppStorage.ts",
      "description": "Custom hook for managing application storage state with automatic synchronization",
      "type": "hook",
      "props": [],
      "jsdoc": {
        "description": "Custom hook for managing application storage state with automatic synchronization"
      },
      "examples": [],
      "realUsageExamples": [
        "const [theme, setTheme] = useAppStorage('app-theme', 'light')",
        "const [clickCount, setClickCount] = useAppStorage('button-clicks', 0);"
      ],
      "hookSignature": "",
      "parameters": [
        {
          "name": "key",
          "type": "string",
          "required": true
        },
        {
          "name": "initialValue",
          "type": "T",
          "required": true
        }
      ],
      "returnType": {
        "type": "[T, unknown]"
      },
      "hookUsages": [
        {
          "file": "src\\component\\ButtonComponent.tsx",
          "line": 40,
          "code": "const [clickCount, setClickCount] = useAppStorage('button-clicks', 0);",
          "context": "ButtonComponent",
          "destructuring": [
            "clickCount",
            "setClickCount"
          ],
          "parameters": [
            "{StringLiteral}",
            "{NumericLiteral}"
          ],
          "defaults": {
            "initialState": "{NumericLiteral}"
          }
        },
        {
          "file": "src\\pages\\ExamplePage.tsx",
          "line": 21,
          "code": "const [theme, setTheme] = useAppStorage('app-theme', 'light')",
          "context": "ExamplePage",
          "destructuring": [
            "theme",
            "setTheme"
          ],
          "parameters": [
            "{StringLiteral}",
            "{StringLiteral}"
          ],
          "defaults": {
            "initialState": "{StringLiteral}"
          }
        }
      ],
      "isBuiltInHook": false,
      "hookCategory": "custom"
    },
    {
      "displayName": "useFormValidator",
      "filePath": "src\\utils\\useFormValidator.ts",
      "description": "Custom hook for managing form validation state",
      "type": "hook",
      "props": [],
      "jsdoc": {
        "description": "Custom hook for managing form validation state"
      },
      "examples": [],
      "realUsageExamples": [
        "const { validateField, errors } = useFormValidator({\r\n    input: (val: string) => {\r\n      if (required && !val.trim()) return 'This field is required';\r\n      if (type === 'email' && val && !/\\S+@\\S+\\.\\S+/.test(val)) return 'Invalid email format';\r\n      return null;\r\n    }\r\n  });",
        "const { validateField, errors, isValid, validateAll } = useFormValidator({\r\n    name: (value: string) => {\r\n      if (!value.trim()) return 'Name is required'\r\n      if (value.length < 2) return 'Name must be at least 2 characters'\r\n      return null\r\n    },\r\n    email: (value: string) => {\r\n      if (!value.trim()) return 'Email is required'\r\n      if (!/\\S+@\\S+\\.\\S+/.test(value)) return 'Please enter a valid email address'\r\n      return null\r\n    },\r\n    company: (value: string) => {\r\n      if (value && value.length < 2) return 'Company name must be at least 2 characters'\r\n      return null\r\n    },\r\n    subject: (value: string) => {\r\n      if (!value.trim()) return 'Subject is required'\r\n      if (value.length < 5) return 'Subject must be at least 5 characters'\r\n      return null\r\n    },\r\n    message: (value: string) => {\r\n      if (!value.trim()) return 'Message is required'\r\n      if (value.length < 10) return 'Message must be at least 10 characters'\r\n      if (value.length > 1000) return 'Message must be less than 1000 characters'\r\n      return null\r\n    }\r\n  })",
        "const { validateField, isValid } = useFormValidator({\r\n    email: (value: string) => /\\S+@\\S+\\.\\S+/.test(value) ? null : 'Invalid email',\r\n    name: (value: string) => value.length >= 2 ? null : 'Name too short'\r\n  })"
      ],
      "hookSignature": "",
      "parameters": [
        {
          "name": "validationRules",
          "type": "unknown",
          "required": true
        }
      ],
      "returnType": {
        "type": "any"
      },
      "hookUsages": [
        {
          "file": "src\\component\\InputField.tsx",
          "line": 46,
          "code": "const { validateField, errors } = useFormValidator({",
          "context": "InputField",
          "destructuring": [
            "validateField",
            "errors"
          ],
          "parameters": [
            "{input: ...}"
          ],
          "defaults": {
            "input": "..."
          }
        },
        {
          "file": "src\\pages\\ContactPage.tsx",
          "line": 28,
          "code": "const { validateField, errors, isValid, validateAll } = useFormValidator({",
          "context": "ContactPage",
          "destructuring": [
            "validateField",
            "errors",
            "isValid",
            "validateAll"
          ],
          "parameters": [
            "{name: ..., email: ..., company: ..., subject: ..., message: ...}"
          ],
          "defaults": {
            "name": "...",
            "email": "...",
            "company": "...",
            "subject": "...",
            "message": "..."
          }
        },
        {
          "file": "src\\pages\\ExamplePage.tsx",
          "line": 29,
          "code": "const { validateField, isValid } = useFormValidator({",
          "context": "ExamplePage",
          "destructuring": [
            "validateField",
            "isValid"
          ],
          "parameters": [
            "{email: ..., name: ...}"
          ],
          "defaults": {
            "email": "...",
            "name": "..."
          }
        }
      ],
      "isBuiltInHook": false,
      "hookCategory": "custom"
    },
    {
      "displayName": "useState",
      "filePath": "React Built-in",
      "description": "Returns a stateful value and a function to update it",
      "type": "hook",
      "props": [],
      "hookUsages": [
        {
          "file": "src\\pages\\ContactPage.tsx",
          "line": 17,
          "code": "const [formData, setFormData] = useState({",
          "context": "ContactPage",
          "destructuring": [
            "formData",
            "setFormData"
          ],
          "parameters": [
            "{name: ..., email: ..., company: ..., subject: ..., message: ..., newsletter: ...}"
          ],
          "defaults": {
            "name": "...",
            "email": "...",
            "company": "...",
            "subject": "...",
            "message": "...",
            "newsletter": "..."
          }
        },
        {
          "file": "src\\pages\\ContactPage.tsx",
          "line": 25,
          "code": "const [isSubmitting, setIsSubmitting] = useState(false)",
          "context": "ContactPage",
          "destructuring": [
            "isSubmitting",
            "setIsSubmitting"
          ],
          "parameters": [
            "{BooleanLiteral}"
          ],
          "defaults": {
            "initialState": "{BooleanLiteral}"
          }
        },
        {
          "file": "src\\pages\\ExamplePage.tsx",
          "line": 20,
          "code": "const [showModal, setShowModal] = useState(false)",
          "context": "ExamplePage",
          "destructuring": [
            "showModal",
            "setShowModal"
          ],
          "parameters": [
            "{BooleanLiteral}"
          ],
          "defaults": {
            "initialState": "{BooleanLiteral}"
          }
        },
        {
          "file": "src\\pages\\ExamplePage.tsx",
          "line": 22,
          "code": "const [email, setEmail] = useState('')",
          "context": "ExamplePage",
          "destructuring": [
            "email",
            "setEmail"
          ],
          "parameters": [
            "{StringLiteral}"
          ],
          "defaults": {
            "initialState": "{StringLiteral}"
          }
        },
        {
          "file": "src\\pages\\ExamplePage.tsx",
          "line": 23,
          "code": "const [name, setName] = useState('')",
          "context": "ExamplePage",
          "destructuring": [
            "name",
            "setName"
          ],
          "parameters": [
            "{StringLiteral}"
          ],
          "defaults": {
            "initialState": "{StringLiteral}"
          }
        },
        {
          "file": "src\\pages\\HomePage.tsx",
          "line": 16,
          "code": "const [showWelcomeModal, setShowWelcomeModal] = useState(false)",
          "context": "HomePage",
          "destructuring": [
            "showWelcomeModal",
            "setShowWelcomeModal"
          ],
          "parameters": [
            "{BooleanLiteral}"
          ],
          "defaults": {
            "initialState": "{BooleanLiteral}"
          }
        },
        {
          "file": "src\\pages\\HomePage.tsx",
          "line": 17,
          "code": "const [userCount, setUserCount] = useState(1250)",
          "context": "HomePage",
          "destructuring": [
            "userCount",
            "setUserCount"
          ],
          "parameters": [
            "{NumericLiteral}"
          ],
          "defaults": {
            "initialState": "{NumericLiteral}"
          }
        },
        {
          "file": "src\\services\\useApiCall.ts",
          "line": 32,
          "code": "const [data, setData] = useState<T | null>(null);",
          "context": "useApiCall",
          "destructuring": [
            "data",
            "setData"
          ],
          "parameters": [
            "{NullLiteral}"
          ],
          "defaults": {
            "initialState": "{NullLiteral}"
          }
        },
        {
          "file": "src\\services\\useApiCall.ts",
          "line": 33,
          "code": "const [loading, setLoading] = useState(true);",
          "context": "useApiCall",
          "destructuring": [
            "loading",
            "setLoading"
          ],
          "parameters": [
            "{BooleanLiteral}"
          ],
          "defaults": {
            "initialState": "{BooleanLiteral}"
          }
        },
        {
          "file": "src\\services\\useApiCall.ts",
          "line": 34,
          "code": "const [error, setError] = useState<Error | null>(null);",
          "context": "useApiCall",
          "destructuring": [
            "error",
            "setError"
          ],
          "parameters": [
            "{NullLiteral}"
          ],
          "defaults": {
            "initialState": "{NullLiteral}"
          }
        },
        {
          "file": "src\\utils\\useAppStorage.ts",
          "line": 21,
          "code": "const [storedValue, setStoredValue] = useState<T>(() => {",
          "context": "useAppStorage",
          "destructuring": [
            "storedValue",
            "setStoredValue"
          ],
          "parameters": [
            "() => {...}"
          ],
          "defaults": {
            "callback": "function"
          }
        },
        {
          "file": "src\\utils\\useFormValidator.ts",
          "line": 18,
          "code": "const [errors, setErrors] = useState<Partial<Record<keyof T, string>>>({});",
          "context": "useFormValidator",
          "destructuring": [
            "errors",
            "setErrors"
          ],
          "parameters": [
            "{}"
          ],
          "defaults": {
            "initialState": "{}"
          }
        }
      ],
      "isBuiltInHook": true,
      "hookCategory": "state",
      "jsdoc": {
        "description": "Returns a stateful value and a function to update it",
        "params": [
          {
            "name": "initialState",
            "type": "T | (() => T)",
            "description": "The initial state value or lazy initial state function"
          }
        ],
        "returns": {
          "type": "[T, Dispatch<SetStateAction<T>>]",
          "description": "A tuple with the current state value and a setter function"
        }
      }
    },
    {
      "displayName": "useReducer",
      "filePath": "React Built-in",
      "description": "Alternative to useState for complex state logic",
      "type": "hook",
      "props": [],
      "hookUsages": [
        {
          "file": "src\\context\\AppContext.tsx",
          "line": 99,
          "code": "const [state, dispatch] = useReducer(appReducer, initialState)",
          "context": "AppProvider",
          "destructuring": [
            "state",
            "dispatch"
          ],
          "parameters": [
            "appReducer",
            "initialState"
          ],
          "defaults": {
            "variable": "initialState"
          }
        }
      ],
      "isBuiltInHook": true,
      "hookCategory": "state"
    },
    {
      "displayName": "useCallback",
      "filePath": "React Built-in",
      "description": "Returns a memoized callback function",
      "type": "hook",
      "props": [],
      "hookUsages": [
        {
          "file": "src\\utils\\useFormValidator.ts",
          "line": 20,
          "code": "const validateField = useCallback((fieldName: keyof T, value: T[typeof fieldName]) => {",
          "context": "validateField",
          "parameters": [
            "() => {...}",
            "[validationRules]"
          ],
          "defaults": {
            "callback": "function",
            "initialArray": "[validationRules]"
          }
        },
        {
          "file": "src\\utils\\useFormValidator.ts",
          "line": 32,
          "code": "const validateAll = useCallback((values: T) => {",
          "context": "validateAll",
          "parameters": [
            "() => {...}",
            "[validationRules]"
          ],
          "defaults": {
            "callback": "function",
            "initialArray": "[validationRules]"
          }
        },
        {
          "file": "src\\utils\\useFormValidator.ts",
          "line": 49,
          "code": "const clearErrors = useCallback(() => {",
          "context": "clearErrors",
          "parameters": [
            "() => {...}",
            "[]"
          ],
          "defaults": {
            "callback": "function",
            "initialArray": "[]"
          }
        }
      ],
      "isBuiltInHook": true,
      "hookCategory": "performance",
      "jsdoc": {
        "description": "Returns a memoized callback function",
        "params": [
          {
            "name": "callback",
            "type": "T",
            "description": "The callback function to memoize"
          },
          {
            "name": "deps",
            "type": "DependencyList",
            "description": "Array of dependencies"
          }
        ],
        "returns": {
          "type": "T",
          "description": "The memoized callback function"
        }
      }
    },
    {
      "displayName": "useContext",
      "filePath": "React Built-in",
      "description": "Accepts a context object and returns the current context value",
      "type": "hook",
      "props": [],
      "hookUsages": [
        {
          "file": "src\\context\\AppContext.tsx",
          "line": 151,
          "code": "const context = useContext(AppContext)",
          "context": "context",
          "parameters": [
            "AppContext"
          ],
          "defaults": {
            "variable": "AppContext"
          }
        }
      ],
      "isBuiltInHook": true,
      "hookCategory": "context"
    },
    {
      "displayName": "useNavigate",
      "filePath": "Unknown",
      "description": "Hook: useNavigate (used in codebase but definition not found)",
      "type": "hook",
      "props": [],
      "hookUsages": [
        {
          "file": "src\\assets\\DynamicPages.tsx",
          "line": 16,
          "code": "const navigate = useNavigate()",
          "context": "navigate",
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\component\\DynamicPagess.tsx",
          "line": 16,
          "code": "const navigate = useNavigate()",
          "context": "navigate",
          "parameters": [],
          "defaults": {}
        },
        {
          "file": "src\\pages\\DynamicPage.tsx",
          "line": 16,
          "code": "const navigate = useNavigate()",
          "context": "navigate",
          "parameters": [],
          "defaults": {}
        }
      ],
      "isBuiltInHook": false,
      "hookCategory": "custom"
    },
    {
      "displayName": "useLocation",
      "filePath": "Unknown",
      "description": "Hook: useLocation (used in codebase but definition not found)",
      "type": "hook",
      "props": [],
      "hookUsages": [
        {
          "file": "src\\component\\Navigation.tsx",
          "line": 15,
          "code": "const location = useLocation()",
          "context": "location",
          "parameters": [],
          "defaults": {}
        }
      ],
      "isBuiltInHook": false,
      "hookCategory": "custom"
    }
  ]
}